import pygame, sys, hashlib, string

from SQL import *
from Methods import *
class Button:
    def __init__(self, button_x, button_y, image1, image2):
        self.image1 = imageload(image1, "Unselected")
        self.image2 = imageload(image2, "Selected")
        self.image = ""
        self.rect = self.image1.get_rect()
        self.rect.left, self.rect.centery = button_x, button_y
        self.isHover = False
        self.clicked = False

    def draw(self, screen):
        if self.isHover:
            self.image = self.image2
        else:
            self.image = self.image1
        mousepos = pygame.mouse.get_pos()
        if self.rect.collidepoint(mousepos):
            self.isHover = True
        else:
            self.isHover = False
        screen.blit(self.image, self.rect)

    def is_clicked(self, pos):
        if self.rect.collidepoint(pos):
            self.clicked = True
        return self.is_clicked

    def reset_is_clicked(self, inputbox):
        if inputbox.text == "":
            self.clicked = False


class InputBox:
    def __init__(self, label, inputBox_x, inputBox_y, width, height, masked=False):
        self.font = None

        self.rect_label = pygame.Rect(inputBox_x, inputBox_y - 20, width // 2, height)
        self.label = label

        self.textbox_rect = pygame.Rect(inputBox_x, inputBox_y, width, height)
        self.rect_text = pygame.Rect(inputBox_x+5, inputBox_y + (height / 4), width // 2, height)
        self.text = ""
        self.store_text = ""

        self.error_rect = pygame.Rect(inputBox_x+250, inputBox_y, width, 175)
        self.error_text_rect = pygame.Rect(inputBox_x+255, inputBox_y + (height / 4), width // 2, height)
        self.error_message = ""

        self.acceptable = string.punctuation + string.digits + string.ascii_letters
        self.masked = masked
        self.activated = False

    def error(self, errorMessage):
        self.error_message = errorMessage

    def draw(self, screen):
        self.font = pygame.font.Font(None, 20)
        label = self.font.render(self.label, False, "#FFFFFF")
        text =  self.font.render(self.text, False, "#FFFFFF")

        if self.label == "Email:":
            error = self.font.render(self.error_message, True, "#FF0000")
            pygame.draw.rect(screen, "#FF0000", self.error_rect, 2)
            screen.blit(error, self.error_text_rect)

        if not self.activated:
            pygame.draw.rect(screen, '#FFFFFF', self.textbox_rect, 2)
        else:
            pygame.draw.rect(screen, '#00FF00', self.textbox_rect, 2)


        screen.blit(text, self.rect_text)
        screen.blit(label, self.rect_label)

    def event_handler(self):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.textbox_rect.collidepoint(event.pos):
                self.activated = True
            else:
                self.activated = False

        if self.activated:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE:
                    self.text = self.text[:-1]
                    if self.masked:
                        self.store_text = self.store_text[:-1]
                else:
                    if event.unicode in self.acceptable:
                        if self.masked:
                            self.store_text += event.unicode
                            self.text += "*"
                        else:
                            self.text += event.unicode

def handle_menu_event(mode_event):
    if mode_event == 4: # Register
        email_register.event_handler()
        username.event_handler()
        password_1_register.event_handler()
        password_2_register.event_handler()
        submit_button.reset_is_clicked(username)
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            if return_button.is_clicked(mouse_pos):
                print("Return")
            elif submit_button.is_clicked(mouse_pos):
                if email_register.text.endswith("@gmail.com"):
                    if not EmailFind(email_register.text):
                        outcome, errorMessage = check_password(password_1_register.store_text)
                        if (password_1_register.store_text == password_2_register.store_text) and outcome:
                            salt = "5gz"
                            database_password = password_1_register.store_text + salt
                            hashed = hashlib.md5(database_password.encode()).hexdigest()
                            InsertNew(username.text, email_register.text, hashed)
                            return 3
                        else:
                            for i in errorMessage:
                                errorMessage += i + "\n"
                            email_register.error(errorMessage)
                    else:
                        email_register.error("Email already exists.")
                else:
                    email_register.error("Email does not contain '@gmail.com'")
        return 4

    elif mode_event == 5: # Login
        email_register.event_handler()
        password_1_register.event_handler()
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            if return_button.is_clicked(mouse_pos):
                return 3
            elif submit_button.is_clicked(mouse_pos):
                print(password_1_register.store_text)
                salt = "5gz"
                database_password = password_1_register.store_text + salt
                hashed = hashlib.md5(database_password.encode()).hexdigest()
                if Check_Login(email_register.text, hashed):
                    return -1

        return 5

    elif mode_event == 6:
        password_1_register.event_handler()
        password_2_register.event_handler()
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            if return_button.is_clicked(mouse_pos):
                return 3
        return 6
def update_ui(mode_ui):
    if mode_ui == 4:  # Register
        email_register.draw(window_surface)
        username.draw(window_surface)
        password_1_register.draw(window_surface)
        password_2_register.draw(window_surface)
        return_button.draw(window_surface)
        submit_button.draw(window_surface)

pygame.init()

window_width, window_height = 1000, 500

pygame.display.set_caption('Menu')
window_surface = pygame.display.set_mode((window_width, window_height))

background = pygame.image.load("Space Background.png")

email_register = InputBox("Email:", 50, 250, 200, 25)
username = InputBox("Username:", 50, 300, 200, 25)
password_1_register = InputBox("Password:", 50, 350, 200, 25, True)
password_2_register = InputBox("Confirm Password:", 50, 400, 200, 25, True)

submit_button = Button(window_width - 300 - 25, 465, "Submit_Unselected", "Submit_Selected")
return_button = Button(window_width-150-10, 465, "Return_Unselected", "Return_Selected")



mode = 4

motion_up = False
x,y = 500, 250
background_rect = background.get_rect(center=(x, y))

is_running = True
clock = pygame.time.Clock()
while is_running:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            is_running = False

        mode = handle_menu_event(mode)

    background_rect = background.get_rect(center=(500, y))
    if not motion_up:
        y -= 0.2
        if y <= 240:
            motion_up = True
    else:
        y += 0.2
        if y >= 260:
            motion_up = False

    window_surface.blit(background, background_rect)

    update_ui(mode)
    pygame.display.update()
    clock.tick(60)
